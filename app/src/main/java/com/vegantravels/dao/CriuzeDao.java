package com.vegantravels.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vegantravels.dao.Criuze;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRIUZE".
*/
public class CriuzeDao extends AbstractDao<Criuze, Long> {

    public static final String TABLENAME = "CRIUZE";

    /**
     * Properties of entity Criuze.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CruizeName = new Property(1, String.class, "cruizeName", false, "CRUIZE_NAME");
        public final static Property ShipName = new Property(2, String.class, "shipName", false, "SHIP_NAME");
        public final static Property DateFrom = new Property(3, String.class, "dateFrom", false, "DATE_FROM");
        public final static Property DateTo = new Property(4, String.class, "dateTo", false, "DATE_TO");
        public final static Property CruizeKey = new Property(5, long.class, "cruizeKey", false, "CRUIZE_KEY");
    };


    public CriuzeDao(DaoConfig config) {
        super(config);
    }
    
    public CriuzeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRIUZE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CRUIZE_NAME\" TEXT NOT NULL ," + // 1: cruizeName
                "\"SHIP_NAME\" TEXT NOT NULL ," + // 2: shipName
                "\"DATE_FROM\" TEXT NOT NULL ," + // 3: dateFrom
                "\"DATE_TO\" TEXT NOT NULL ," + // 4: dateTo
                "\"CRUIZE_KEY\" INTEGER NOT NULL );"); // 5: cruizeKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRIUZE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Criuze entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCruizeName());
        stmt.bindString(3, entity.getShipName());
        stmt.bindString(4, entity.getDateFrom());
        stmt.bindString(5, entity.getDateTo());
        stmt.bindLong(6, entity.getCruizeKey());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Criuze readEntity(Cursor cursor, int offset) {
        Criuze entity = new Criuze( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // cruizeName
            cursor.getString(offset + 2), // shipName
            cursor.getString(offset + 3), // dateFrom
            cursor.getString(offset + 4), // dateTo
            cursor.getLong(offset + 5) // cruizeKey
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Criuze entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCruizeName(cursor.getString(offset + 1));
        entity.setShipName(cursor.getString(offset + 2));
        entity.setDateFrom(cursor.getString(offset + 3));
        entity.setDateTo(cursor.getString(offset + 4));
        entity.setCruizeKey(cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Criuze entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Criuze entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
