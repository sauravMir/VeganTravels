package com.vegantravels.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.vegantravels.dao.Criuze;
import com.vegantravels.dao.CriuzeTemporary;
import com.vegantravels.dao.Excursion;
import com.vegantravels.dao.ExcursionTemporary;
import com.vegantravels.dao.Guest;
import com.vegantravels.dao.GuestTemporary;

import com.vegantravels.dao.CriuzeDao;
import com.vegantravels.dao.CriuzeTemporaryDao;
import com.vegantravels.dao.ExcursionDao;
import com.vegantravels.dao.ExcursionTemporaryDao;
import com.vegantravels.dao.GuestDao;
import com.vegantravels.dao.GuestTemporaryDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig criuzeDaoConfig;
    private final DaoConfig criuzeTemporaryDaoConfig;
    private final DaoConfig excursionDaoConfig;
    private final DaoConfig excursionTemporaryDaoConfig;
    private final DaoConfig guestDaoConfig;
    private final DaoConfig guestTemporaryDaoConfig;

    private final CriuzeDao criuzeDao;
    private final CriuzeTemporaryDao criuzeTemporaryDao;
    private final ExcursionDao excursionDao;
    private final ExcursionTemporaryDao excursionTemporaryDao;
    private final GuestDao guestDao;
    private final GuestTemporaryDao guestTemporaryDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        criuzeDaoConfig = daoConfigMap.get(CriuzeDao.class).clone();
        criuzeDaoConfig.initIdentityScope(type);

        criuzeTemporaryDaoConfig = daoConfigMap.get(CriuzeTemporaryDao.class).clone();
        criuzeTemporaryDaoConfig.initIdentityScope(type);

        excursionDaoConfig = daoConfigMap.get(ExcursionDao.class).clone();
        excursionDaoConfig.initIdentityScope(type);

        excursionTemporaryDaoConfig = daoConfigMap.get(ExcursionTemporaryDao.class).clone();
        excursionTemporaryDaoConfig.initIdentityScope(type);

        guestDaoConfig = daoConfigMap.get(GuestDao.class).clone();
        guestDaoConfig.initIdentityScope(type);

        guestTemporaryDaoConfig = daoConfigMap.get(GuestTemporaryDao.class).clone();
        guestTemporaryDaoConfig.initIdentityScope(type);

        criuzeDao = new CriuzeDao(criuzeDaoConfig, this);
        criuzeTemporaryDao = new CriuzeTemporaryDao(criuzeTemporaryDaoConfig, this);
        excursionDao = new ExcursionDao(excursionDaoConfig, this);
        excursionTemporaryDao = new ExcursionTemporaryDao(excursionTemporaryDaoConfig, this);
        guestDao = new GuestDao(guestDaoConfig, this);
        guestTemporaryDao = new GuestTemporaryDao(guestTemporaryDaoConfig, this);

        registerDao(Criuze.class, criuzeDao);
        registerDao(CriuzeTemporary.class, criuzeTemporaryDao);
        registerDao(Excursion.class, excursionDao);
        registerDao(ExcursionTemporary.class, excursionTemporaryDao);
        registerDao(Guest.class, guestDao);
        registerDao(GuestTemporary.class, guestTemporaryDao);
    }
    
    public void clear() {
        criuzeDaoConfig.getIdentityScope().clear();
        criuzeTemporaryDaoConfig.getIdentityScope().clear();
        excursionDaoConfig.getIdentityScope().clear();
        excursionTemporaryDaoConfig.getIdentityScope().clear();
        guestDaoConfig.getIdentityScope().clear();
        guestTemporaryDaoConfig.getIdentityScope().clear();
    }

    public CriuzeDao getCriuzeDao() {
        return criuzeDao;
    }

    public CriuzeTemporaryDao getCriuzeTemporaryDao() {
        return criuzeTemporaryDao;
    }

    public ExcursionDao getExcursionDao() {
        return excursionDao;
    }

    public ExcursionTemporaryDao getExcursionTemporaryDao() {
        return excursionTemporaryDao;
    }

    public GuestDao getGuestDao() {
        return guestDao;
    }

    public GuestTemporaryDao getGuestTemporaryDao() {
        return guestTemporaryDao;
    }

}
