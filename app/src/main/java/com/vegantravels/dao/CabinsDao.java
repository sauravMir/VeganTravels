package com.vegantravels.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.vegantravels.dao.Cabins;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CABINS".
*/
public class CabinsDao extends AbstractDao<Cabins, Long> {

    public static final String TABLENAME = "CABINS";

    /**
     * Properties of entity Cabins.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Occupancy = new Property(1, int.class, "occupancy", false, "OCCUPANCY");
        public final static Property CabinNumber = new Property(2, int.class, "cabinNumber", false, "CABIN_NUMBER");
        public final static Property NumberOfGuest = new Property(3, int.class, "numberOfGuest", false, "NUMBER_OF_GUEST");
        public final static Property GuestVT_Id = new Property(4, String.class, "guestVT_Id", false, "GUEST_VT__ID");
        public final static Property CruizeId = new Property(5, long.class, "cruizeId", false, "CRUIZE_ID");
        public final static Property PaymentStatus = new Property(6, Integer.class, "paymentStatus", false, "PAYMENT_STATUS");
        public final static Property Excursion = new Property(7, Long.class, "excursion", false, "EXCURSION");
        public final static Property DeviceDate = new Property(8, String.class, "deviceDate", false, "DEVICE_DATE");
        public final static Property CabinUniqueId = new Property(9, long.class, "CabinUniqueId", false, "CABIN_UNIQUE_ID");
        public final static Property CreatedAt = new Property(10, Long.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(11, Long.class, "updatedAt", false, "UPDATED_AT");
    };


    public CabinsDao(DaoConfig config) {
        super(config);
    }
    
    public CabinsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CABINS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OCCUPANCY\" INTEGER NOT NULL ," + // 1: occupancy
                "\"CABIN_NUMBER\" INTEGER NOT NULL ," + // 2: cabinNumber
                "\"NUMBER_OF_GUEST\" INTEGER NOT NULL ," + // 3: numberOfGuest
                "\"GUEST_VT__ID\" TEXT NOT NULL ," + // 4: guestVT_Id
                "\"CRUIZE_ID\" INTEGER NOT NULL ," + // 5: cruizeId
                "\"PAYMENT_STATUS\" INTEGER," + // 6: paymentStatus
                "\"EXCURSION\" INTEGER," + // 7: excursion
                "\"DEVICE_DATE\" TEXT NOT NULL ," + // 8: deviceDate
                "\"CABIN_UNIQUE_ID\" INTEGER NOT NULL ," + // 9: CabinUniqueId
                "\"CREATED_AT\" INTEGER," + // 10: createdAt
                "\"UPDATED_AT\" INTEGER);"); // 11: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CABINS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Cabins entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getOccupancy());
        stmt.bindLong(3, entity.getCabinNumber());
        stmt.bindLong(4, entity.getNumberOfGuest());
        stmt.bindString(5, entity.getGuestVT_Id());
        stmt.bindLong(6, entity.getCruizeId());
 
        Integer paymentStatus = entity.getPaymentStatus();
        if (paymentStatus != null) {
            stmt.bindLong(7, paymentStatus);
        }
 
        Long excursion = entity.getExcursion();
        if (excursion != null) {
            stmt.bindLong(8, excursion);
        }
        stmt.bindString(9, entity.getDeviceDate());
        stmt.bindLong(10, entity.getCabinUniqueId());
 
        Long createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(11, createdAt);
        }
 
        Long updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(12, updatedAt);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Cabins readEntity(Cursor cursor, int offset) {
        Cabins entity = new Cabins( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // occupancy
            cursor.getInt(offset + 2), // cabinNumber
            cursor.getInt(offset + 3), // numberOfGuest
            cursor.getString(offset + 4), // guestVT_Id
            cursor.getLong(offset + 5), // cruizeId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // paymentStatus
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // excursion
            cursor.getString(offset + 8), // deviceDate
            cursor.getLong(offset + 9), // CabinUniqueId
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // createdAt
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Cabins entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOccupancy(cursor.getInt(offset + 1));
        entity.setCabinNumber(cursor.getInt(offset + 2));
        entity.setNumberOfGuest(cursor.getInt(offset + 3));
        entity.setGuestVT_Id(cursor.getString(offset + 4));
        entity.setCruizeId(cursor.getLong(offset + 5));
        entity.setPaymentStatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setExcursion(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDeviceDate(cursor.getString(offset + 8));
        entity.setCabinUniqueId(cursor.getLong(offset + 9));
        entity.setCreatedAt(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setUpdatedAt(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Cabins entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Cabins entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
